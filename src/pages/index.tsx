import { GetStaticProps, type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import { Tab } from "@headlessui/react";
import Masonry from "react-masonry-css";
import classNames from "classnames";

import type { LightGallery } from "lightgallery/lightgallery";
import LightGalleryComponent from "lightgallery/react";

// import styles
import "lightgallery/css/lightgallery.css";
import "lightgallery/css/lg-zoom.css";
import "lightgallery/css/lg-thumbnail.css";

import lgThumbnail from "lightgallery/plugins/thumbnail";
import lgZoom from "lightgallery/plugins/zoom";

import background from "../../public/photography-bg.jpeg";
import ocean1 from "../../public/ocean-1.jpeg";
import ocean2 from "../../public/ocean-2.jpeg";
import ocean3 from "../../public/ocean-3.jpeg";
import ocean4 from "../../public/ocean-4.jpeg";
import ocean5 from "../../public/ocean-5.jpeg";
import { useRef } from "react";
import { createApi } from "unsplash-js";
import nodeFetch from "node-fetch";

const tabs = [
  { key: "all", display: "All" },
  { key: "oceans", display: "Oceans" },
  { key: "forests", display: "Forests" },
];

type Photo = {
  src: string;
  thumb: string;
  width: number;
  height: number;
  alt: string;
};

type HomeProps = {
  oceans: Photo[];
  forests: Photo[];
};

export const getStaticProps: GetStaticProps<HomeProps> = async () => {
  // const images = [ocean1, ocean2, ocean3, ocean4, ocean5];

  const unsplash = createApi({
    accessKey: process.env.UNSPLASH_ACCESS_KEY!,
    fetch: nodeFetch as unknown as typeof fetch,
  });

  const oceans = await unsplash.search.getPhotos({
    query: "ocean",
    page: 1,
    perPage: 10,
  });

  const forests = await unsplash.search.getPhotos({
    query: "forest",
    page: 1,
    perPage: 10,
  });

  const mappedOceans: Photo[] = [];
  const mappedOForests: Photo[] = [];

  if (oceans.type === "success") {
    const oceansArr = oceans.response.results.map((d, i) => {
      return {
        src: d.urls.full,
        thumb: d.urls.thumb,
        width: d.width,
        height: d.height,
        alt: d.alt_description ?? `ocean-img-${i}`,
      };
    });
    mappedOceans.push(...oceansArr);
  } else {
    console.error("could not get oceans");
  }

  if (forests.type === "success") {
    const forestsArr = forests.response.results.map((d, i) => {
      return {
        src: d.urls.full,
        thumb: d.urls.thumb,
        width: d.width,
        height: d.height,
        alt: d.alt_description ?? `forest-img-${i}`,
      };
    });
    mappedOForests.push(...forestsArr);
  } else {
    console.error("could not get forests");
  }

  console.log(mappedOceans);

  // console.log(response.response.results);

  return {
    props: {
      oceans: mappedOceans,
      forests: mappedOForests,
    },
  };
};

const Home = ({ oceans, forests }: HomeProps) => {
  console.log({ oceans, forests });

  return (
    <div className=" h-full overflow-auto">
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Image
        src={background}
        alt={"background-image"}
        className="fixed left-0 top-0 z-0"
        placeholder="blur"
      />
      <div className="fixed left-0 top-0 z-10 h-full w-full bg-gradient-to-t from-stone-900"></div>

      <header className="fixed top-0 z-30 flex h-[90px] w-full items-center justify-between px-10">
        <div className="hidden">hm</div>
        <span className="text-lg font-medium uppercase">
          Photography Portfolio
        </span>
        <Link
          href={""}
          className="rounded-3xl bg-white px-3 py-2 text-stone-700 hover:bg-opacity-90"
        >
          Get in touch
        </Link>
      </header>

      <main className="relative z-20 pt-[110px]">
        <div className="flex h-full flex-col items-center">
          <Tab.Group>
            <Tab.List className="flex items-center gap-12">
              {tabs.map((tab) => (
                <Tab key={tab.key} className="p-2">
                  {({ selected }) => (
                    <span
                      className={classNames(
                        "text-lg uppercase",
                        selected ? "text-white" : "text-stone-600"
                      )}
                    >
                      {tab.display}
                    </span>
                  )}
                </Tab>
              ))}
            </Tab.List>
            <Tab.Panels className="my-6 h-full w-full max-w-[900px] p-2 sm:p-4">
              <Tab.Panel className="">
                <Gallery photos={[...oceans, ...forests]} />
              </Tab.Panel>
              <Tab.Panel>
                <Gallery photos={[...oceans]} />
              </Tab.Panel>
              <Tab.Panel>
                <Gallery photos={[...forests]} />
              </Tab.Panel>
            </Tab.Panels>
          </Tab.Group>
        </div>
      </main>

      <footer className="relative z-20 flex h-[90px] items-center justify-center text-lg font-medium uppercase">
        <p>Photography portfolio</p>
      </footer>
    </div>
  );
};

type GalleryProps = {
  photos: Photo[];
};

const Gallery = ({ photos }: GalleryProps) => {
  const lightboxRef = useRef<LightGallery | null>(null);
  return (
    <>
      <Masonry className="flex gap-4" columnClassName="" breakpointCols={2}>
        {photos.map((photo, i) => {
          return (
            <Image
              src={photo.src}

              width={photo.width}
              height={photo.height}
              alt={photo.alt}
              className="my-4 cursor-pointer hover:opacity-70"
              key={photo.src}
              // placeholder="blur"
              onClick={() => {
                lightboxRef.current?.openGallery(i);
              }}
            />
          );
        })}
      </Masonry>

      <LightGalleryComponent
        onInit={(ref) => {
          if (ref) {
            lightboxRef.current = ref.instance;
          }
        }}
        speed={500}
        plugins={[lgThumbnail, lgZoom]}
        dynamic
        dynamicEl={photos.map((photo) => {
          return {
            src: photo.src,
            thumb: photo.thumb,
          };
        })}
      />
    </>
  );
};

export default Home;
